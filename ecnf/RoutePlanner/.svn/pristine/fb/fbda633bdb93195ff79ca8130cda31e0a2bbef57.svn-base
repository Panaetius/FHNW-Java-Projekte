using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Serialization;
using Fhnw.Ecnf.RoutePlanner.RoutePlannerLib.Util;

namespace Fhnw.Ecnf.RoutePlanner.RoutePlannerLib
{
    public class Cities
    {

        private static TraceSource citiesTrace =
            new TraceSource("CitiesTrace");

        private List<City> InitIndexForAlgorithm(List<City> foundCities) { 
            // set index for FloydWarshall 
            for (int index = 0; index < foundCities.Count; index++)
            {
                foundCities[index].Index = index;
            } 
            return foundCities; 
        }

        public List<City> CityList { get; set; }
        public int Count { get { return CityList.Count(); }}
        
        public Cities()
        {
            CityList = new List<City>();
        }

        public int ReadCities(string fileName)
        {
            int oldCount = Count;
            citiesTrace.TraceInformation("ReadCities started");
			try
			{
				using (TextReader reader = new StreamReader(fileName))
				{
					CityList.AddRange(from cs in reader.GetSplittedLines('\t')
						select new City(cs[0], cs[1], int.Parse(cs[2]), double.Parse(cs[3]), double.Parse(cs[4])));
				}
			}
			catch (FileNotFoundException e)
			{
                SourceLevels oldLevel = citiesTrace.Switch.Level;
                citiesTrace.Switch.Level = SourceLevels.Critical;
                citiesTrace.TraceEvent(TraceEventType.Critical, 1, e.StackTrace);
                citiesTrace.Switch.Level = oldLevel;
			}
            
            citiesTrace.TraceInformation("Read Cities ended");
            citiesTrace.Close();

			return Count - oldCount;           
            
        }

        public List<City> FindNeighbours(City city, double distance)
        {
            return FindNeighbours(city.Location, distance);
        }

        public City FindCity(string cName)
        {
            Predicate<City> findCityPredicate = delegate(City c)
            {
                return c.Name.ToLower().Equals(cName.ToLower());
            };
            return CityList.Find(findCityPredicate);
        }


        public List<City> FindNeighbours(WayPoint location, double distance)
        {
            return CityList.Where(c => c.Location.Distance(location) <= distance).OrderBy(c => c.Location.Distance(location) <= distance).ToList();
        }

        public City this[int index]
        {
            get { return index < CityList.Count ? CityList[index] : null; }
            set { CityList[index] = value; }
        }
        /// <summary>
        /// Find all cities between 2 cities 
        /// </summary>
        /// <param name="from">source city</param>
        /// <param name="to">target city</param>
        /// <returns>list of cities</returns>
        public List<City> FindCitiesBetween(City from, City to)
        {
            var foundCities = new List<City>();

            if (from == null || to == null)
            {
                return foundCities;
            }

            foundCities.Add(from);

            double minLat = Math.Min(from.Location.Latitude, to.Location.Latitude);
            double maxLat = Math.Max(from.Location.Latitude, to.Location.Latitude);
            double minLon = Math.Min(from.Location.Longitude, to.Location.Longitude);
            double maxLon = Math.Max(from.Location.Longitude, to.Location.Longitude);

            
            foundCities.AddRange(this.CityList.FindAll(c =>
                c.Location.Latitude > minLat && c.Location.Latitude < maxLat
                        && c.Location.Longitude > minLon && c.Location.Longitude < maxLon));

            foundCities.Add(to);

            InitIndexForAlgorithm(foundCities);

            return foundCities;
        }
    }

}
