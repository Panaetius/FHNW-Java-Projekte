using System.Diagnostics;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System;
using System.Threading.Tasks;
using Fhnw.Ecnf.RoutePlanner.RoutePlannerLib.Util;
namespace Fhnw.Ecnf.RoutePlanner.RoutePlannerLib
{
    /// <summary>
    /// Handler which indicates, that a route rerquest to a city
    /// has been made.
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    public delegate void RouteRequestHandler(object sender, RouteRequestEventArgs e);

    /// <summary>
    /// Manages a routes from a city to another city.
    /// </summary>
    public abstract class Routes : IRoutes
    {
        TraceSource traceSource = new TraceSource("Fhnw.Ecnf.RoutePlanner.RoutePlannerLib.Routes");

        public event RouteRequestHandler RouteRequestEvent;

        readonly protected List<Link> routes = new List<Link>();
        readonly protected Cities cities;

        public bool ExecuteParallel { set; get; }

        public int Count
        {
            get { return routes.Count; }
        }

        /// <summary>
        /// Initializes the Routes with the cities.
        /// </summary>
        /// <param name="cities"></param>
        public Routes(Cities cities)
        {
            this.cities = cities;
        }

        /// <summary>
        /// Calculates and returns the shortest route between the passed cities.
        /// </summary>
        /// <param name="fromCity"></param>name of from city
        /// <param name="toCity"></param>name of to city
        /// <param name="mode"></param>transportation mode
        /// <returns></returns>
        public abstract List<Link> FindShortestRouteBetween(string fromCity, string toCity,
                                            TransportModes mode, IProgress<string> reportProgress=null);

        /// <summary>
        /// Reads a list of links from the given file.
        /// Reads only links where the cities exist.
        /// </summary>
        /// <param name="filename">name of links file</param>
        /// <returns>number of read route</returns>
        public int ReadRoutes(string filename)
        {
            int routesRead = 0;

            // write log 
            traceSource.TraceEvent(TraceEventType.Information, 1, "ReadRoutes started");

            try
            {

                using (TextReader reader = new StreamReader(filename))
                {
                    foreach (string[] linkAsString in reader.GetSplittedLines('\t'))

                    {
                        City city1 = cities.FindCity(linkAsString[0]);
                        City city2 = cities.FindCity(linkAsString[1]);

                        // only add links, where the cities are found 
                        if ((city1 != null) && (city2 != null))
                        {
                            routes.Add(new Link(city1, city2, city1.Location.Distance(city2.Location),
                                                TransportModes.Rail));
                            routesRead++;
                        }
                    }
                    // write log 
                    traceSource.TraceEvent(TraceEventType.Information, 1, "ReadRoutes ended");
                }
            }
            catch (Exception e)
            {
                traceSource.TraceEvent(TraceEventType.Critical, 2, "FileNotFound: " + e.StackTrace.ToString());
            }
                
            return routesRead;

        }

        protected void NotifyObservers(string fromCity, string toCity, TransportModes mode)
        {
            // notify observers about request
            if (RouteRequestEvent != null)
            {
                RouteRequestEvent(this, new RouteRequestEventArgs(
                                            new City(fromCity, null, 0, 0, 0),
                                            new City(toCity, null, 0, 0, 0), mode));
            }
        }

        /// <summary>
        /// Searches the shortest path for cities and the given links
        /// </summary>
        /// <param name="mode">transportation mode</param>
        /// <param name="q"></param>
        /// <param name="dist"></param>
        /// <param name="previous"></param>
        /// <returns></returns>
        private Dictionary<City, City> SearchShortestPath(TransportModes mode,
                         List<City> q, Dictionary<City, double> dist, Dictionary<City, City> previous)
        {
            while (q.Count > 0)
            {
                City u = null;
                double minDist = double.MaxValue;
                // find city u with smallest dist
                foreach (City c in q)
                {
                    if (dist[c] < minDist)
                    {
                        u = c;
                        minDist = dist[c];
                    }
                }
                if (u != null)
                {
                    q.Remove(u);
                    foreach (City n in FindNeighbours(u, mode))
                    {
                        Link l = FindLink(u, n, mode);
                        double d = dist[u];
                        if (l != null)
                        {
                            d += l.Distance;
                        }
                        else
                        {
                            d += double.MaxValue;
                        }
                        if (dist.ContainsKey(n) && d < dist[n])
                        {
                            dist[n] = d;
                            previous[n] = u;
                        }
                    }
                }
                else
                {
                    break;
                }

            }

            return previous;
        }

        /// <summary>
        /// Find all cities between 2 cities 
        /// </summary>
        /// <param name="fromName">source city</param>
        /// <param name="toName">target city</param>
        /// <returns>list of cities</returns>
        public List<City> FindCitiesBetween(string fromName, string toName)
        {
            City from = cities.FindCity(fromName);
            City to = cities.FindCity(toName);
            return cities.FindCitiesBetween(from, to);
        }

        /// <summary>
        /// Finds the link between two cities.
        /// </summary>
        /// <param name="c1">first city</param>
        /// <param name="c2">second city</param>
        /// <param name="t"></param>
        /// <returns>found link or null</returns>

        protected Link FindLink(City c1, City c2, TransportModes t)
        {
            foreach (Link l in routes)
            {
                if (t.Equals(l.TransportMode) &&
                          ((c1.Equals(l.FromCity) && c2.Equals(l.ToCity))
                        || (c2.Equals(l.FromCity) && c1.Equals(l.ToCity))))
                {
                    return new Link(c1, c2, l.Distance, TransportModes.Rail);
                }
            }
            return null;
        }

        protected List<Link> FindPath(List<City> citiesOnRoute, TransportModes mode)
        {
            City to = null;
            var itinerary = new List<Link>();
            foreach (City c in citiesOnRoute)
            {
                City from = to;
                to = c;
                if (from != null)
                {
                    Link l = FindLink(from, to, mode);
                    if (l != null)
                    {
                        itinerary.Add(l);
                    }
                }
            }
            return itinerary;
        }

        /// <summary>
        /// Finds all neighbor cities of a city. 
        /// </summary>
        /// <param name="city">source city</param>
        /// <param name="mode">transportation mode</param>
        /// <returns>list of neighbor cities</returns>
        private List<City> FindNeighbours(City city, TransportModes mode)
        {
            var neighbors = new List<City>();
            foreach (Link r in routes)
            {
                if (mode.Equals(r.TransportMode))
                {
                    if (city.Equals(r.FromCity))
                    {
                        neighbors.Add(r.ToCity);
                    }
                    else if (city.Equals(r.ToCity))
                    {
                        neighbors.Add(r.FromCity);
                    }
                }
            }
            return neighbors;
        }

        private List<City> GetCitiesOnRoute(City source, City target, Dictionary<City, City> previous)
        {
            var citiesOnRoute = new List<City>();
            City cr = target;
            while (previous[cr] != null)
            {
                citiesOnRoute.Add(cr);
                cr = previous[cr];
            }
            citiesOnRoute.Add(source);

            citiesOnRoute.Reverse();
            return citiesOnRoute;
        }

        public City[] FindCities(TransportModes tmode)
        {
            IEnumerable<City> l = ((from r in routes
                                    where r.TransportMode == tmode
                                    select r.FromCity).Union(
                                   from r in routes
                                   where r.TransportMode == tmode
                                   select r.ToCity)).Distinct();

            return l.ToArray();

        }

        public async Task<List<Link>> GoFindShortestRouteBetween(string fromCity, string toCity,
                                                  TransportModes mode, IProgress<string> reportProgress = null)
        {
            var linkList = await FindShortestRouteBetweenAsync(fromCity, toCity, mode, reportProgress);

            return linkList;
        }

        public Task<List<Link>> FindShortestRouteBetweenAsync(string fromCity, string toCity,
                                                   TransportModes mode, IProgress<string> reportProgress)
        {
            return Task.Run(() =>
                            FindShortestRouteBetween(fromCity, toCity,
                                                     mode, reportProgress)
                );
        }

        public List<Link> FindShortestRouteBetween(string fromCity, string toCity,
                                                   TransportModes mode)
        {
            return FindShortestRouteBetween(fromCity, toCity, mode, null);

        }

  
    }
}
