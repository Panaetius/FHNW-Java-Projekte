// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

package ch.fhnw.ds.rmi.calculator;

@SuppressWarnings("deprecation")
public final class CalculatorImpl_Stub extends java.rmi.server.RemoteStub
		implements ch.fhnw.ds.rmi.calculator.Calculator, java.rmi.Remote {
	private static final java.rmi.server.Operation[] operations = {
			new java.rmi.server.Operation("long add(long, long)"),
			new java.rmi.server.Operation("long div(long, long)"),
			new java.rmi.server.Operation("long mul(long, long)"),
			new java.rmi.server.Operation("long sub(long, long)") };

	private static final long interfaceHash = 2829799981544659448L;

	private static final long serialVersionUID = 2;

	private static boolean useNewInvoke;
	private static java.lang.reflect.Method $method_add_0;
	private static java.lang.reflect.Method $method_div_1;
	private static java.lang.reflect.Method $method_mul_2;
	private static java.lang.reflect.Method $method_sub_3;

	static {
		try {
			java.rmi.server.RemoteRef.class.getMethod("invoke",
					new java.lang.Class[] { java.rmi.Remote.class,
							java.lang.reflect.Method.class,
							java.lang.Object[].class, long.class });
			useNewInvoke = true;
			$method_add_0 = ch.fhnw.ds.rmi.calculator.Calculator.class
					.getMethod("add", new java.lang.Class[] { long.class,
							long.class });
			$method_div_1 = ch.fhnw.ds.rmi.calculator.Calculator.class
					.getMethod("div", new java.lang.Class[] { long.class,
							long.class });
			$method_mul_2 = ch.fhnw.ds.rmi.calculator.Calculator.class
					.getMethod("mul", new java.lang.Class[] { long.class,
							long.class });
			$method_sub_3 = ch.fhnw.ds.rmi.calculator.Calculator.class
					.getMethod("sub", new java.lang.Class[] { long.class,
							long.class });
		} catch (java.lang.NoSuchMethodException e) {
			useNewInvoke = false;
		}
	}

	// constructors
	public CalculatorImpl_Stub() {
		super();
	}

	public CalculatorImpl_Stub(java.rmi.server.RemoteRef ref) {
		super(ref);
	}

	// methods from remote interfaces

	// implementation of add(long, long)
	public long add(long $param_long_1, long $param_long_2)
			throws java.rmi.RemoteException {
		try {
			if (useNewInvoke) {
				Object $result = ref.invoke(this, $method_add_0,
						new java.lang.Object[] {
								new java.lang.Long($param_long_1),
								new java.lang.Long($param_long_2) },
						8040560279107955721L);
				return ((java.lang.Long) $result).longValue();
			} else {
				java.rmi.server.RemoteCall call = ref.newCall(
						(java.rmi.server.RemoteObject) this, operations, 0,
						interfaceHash);
				try {
					java.io.ObjectOutput out = call.getOutputStream();
					out.writeLong($param_long_1);
					out.writeLong($param_long_2);
				} catch (java.io.IOException e) {
					throw new java.rmi.MarshalException(
							"error marshalling arguments", e);
				}
				ref.invoke(call);
				long $result;
				try {
					java.io.ObjectInput in = call.getInputStream();
					$result = in.readLong();
				} catch (java.io.IOException e) {
					throw new java.rmi.UnmarshalException(
							"error unmarshalling return", e);
				} finally {
					ref.done(call);
				}
				return $result;
			}
		} catch (java.lang.RuntimeException e) {
			throw e;
		} catch (java.rmi.RemoteException e) {
			throw e;
		} catch (java.lang.Exception e) {
			throw new java.rmi.UnexpectedException(
					"undeclared checked exception", e);
		}
	}

	// implementation of div(long, long)
	public long div(long $param_long_1, long $param_long_2)
			throws java.rmi.RemoteException {
		try {
			if (useNewInvoke) {
				Object $result = ref.invoke(this, $method_div_1,
						new java.lang.Object[] {
								new java.lang.Long($param_long_1),
								new java.lang.Long($param_long_2) },
						5180157848515624758L);
				return ((java.lang.Long) $result).longValue();
			} else {
				java.rmi.server.RemoteCall call = ref.newCall(
						(java.rmi.server.RemoteObject) this, operations, 1,
						interfaceHash);
				try {
					java.io.ObjectOutput out = call.getOutputStream();
					out.writeLong($param_long_1);
					out.writeLong($param_long_2);
				} catch (java.io.IOException e) {
					throw new java.rmi.MarshalException(
							"error marshalling arguments", e);
				}
				ref.invoke(call);
				long $result;
				try {
					java.io.ObjectInput in = call.getInputStream();
					$result = in.readLong();
				} catch (java.io.IOException e) {
					throw new java.rmi.UnmarshalException(
							"error unmarshalling return", e);
				} finally {
					ref.done(call);
				}
				return $result;
			}
		} catch (java.lang.RuntimeException e) {
			throw e;
		} catch (java.rmi.RemoteException e) {
			throw e;
		} catch (java.lang.Exception e) {
			throw new java.rmi.UnexpectedException(
					"undeclared checked exception", e);
		}
	}

	// implementation of mul(long, long)
	public long mul(long $param_long_1, long $param_long_2)
			throws java.rmi.RemoteException {
		try {
			if (useNewInvoke) {
				Object $result = ref.invoke(this, $method_mul_2,
						new java.lang.Object[] {
								new java.lang.Long($param_long_1),
								new java.lang.Long($param_long_2) },
						-4927388321647852427L);
				return ((java.lang.Long) $result).longValue();
			} else {
				java.rmi.server.RemoteCall call = ref.newCall(
						(java.rmi.server.RemoteObject) this, operations, 2,
						interfaceHash);
				try {
					java.io.ObjectOutput out = call.getOutputStream();
					out.writeLong($param_long_1);
					out.writeLong($param_long_2);
				} catch (java.io.IOException e) {
					throw new java.rmi.MarshalException(
							"error marshalling arguments", e);
				}
				ref.invoke(call);
				long $result;
				try {
					java.io.ObjectInput in = call.getInputStream();
					$result = in.readLong();
				} catch (java.io.IOException e) {
					throw new java.rmi.UnmarshalException(
							"error unmarshalling return", e);
				} finally {
					ref.done(call);
				}
				return $result;
			}
		} catch (java.lang.RuntimeException e) {
			throw e;
		} catch (java.rmi.RemoteException e) {
			throw e;
		} catch (java.lang.Exception e) {
			throw new java.rmi.UnexpectedException(
					"undeclared checked exception", e);
		}
	}

	// implementation of sub(long, long)
	public long sub(long $param_long_1, long $param_long_2)
			throws java.rmi.RemoteException {
		try {
			if (useNewInvoke) {
				Object $result = ref.invoke(this, $method_sub_3,
						new java.lang.Object[] {
								new java.lang.Long($param_long_1),
								new java.lang.Long($param_long_2) },
						-381845905804201651L);
				return ((java.lang.Long) $result).longValue();
			} else {
				java.rmi.server.RemoteCall call = ref.newCall(
						(java.rmi.server.RemoteObject) this, operations, 3,
						interfaceHash);
				try {
					java.io.ObjectOutput out = call.getOutputStream();
					out.writeLong($param_long_1);
					out.writeLong($param_long_2);
				} catch (java.io.IOException e) {
					throw new java.rmi.MarshalException(
							"error marshalling arguments", e);
				}
				ref.invoke(call);
				long $result;
				try {
					java.io.ObjectInput in = call.getInputStream();
					$result = in.readLong();
				} catch (java.io.IOException e) {
					throw new java.rmi.UnmarshalException(
							"error unmarshalling return", e);
				} finally {
					ref.done(call);
				}
				return $result;
			}
		} catch (java.lang.RuntimeException e) {
			throw e;
		} catch (java.rmi.RemoteException e) {
			throw e;
		} catch (java.lang.Exception e) {
			throw new java.rmi.UnexpectedException(
					"undeclared checked exception", e);
		}
	}
}
